// Mocks generated by Mockito 5.2.0 from annotations
// in marvel/test/features/data/repositories/character_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:marvel/core/filter/filter.dart' as _i5;
import 'package:marvel/features/data/data_sources/characters_data_source.dart'
    as _i2;
import 'package:marvel/features/data/models/character_model.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [CharactersDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersDataSource extends _i1.Mock
    implements _i2.CharactersDataSource {
  MockCharactersDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CharacterModel>> fetchCharacters(_i5.Filter? filter) =>
      (super.noSuchMethod(Invocation.method(#fetchCharacters, [filter]),
          returnValue: Future<List<_i4.CharacterModel>>.value(
              <_i4.CharacterModel>[])) as _i3.Future<List<_i4.CharacterModel>>);
}
